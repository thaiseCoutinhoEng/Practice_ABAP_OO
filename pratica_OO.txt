*&---------------------------------------------------------------------*
*& Report ZTC_PROG_OO05
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZTC_PROG_OO05.
*Acessando métodos e atributos de instâncias ou estáticos (classe).

CLASS lcl_elemento_de_dados DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      _gerar_elemento_de_dados IMPORTING iv_nome        TYPE char20
                                         iv_descricao   TYPE string
                                         iv_texto_curto TYPE text15
                                         iv_texto_medio TYPE text30
                                         iv_texto_longo TYPE text50
                                         iv_titulo      TYPE text20
                               RETURNING VALUE(return)  TYPE REF TO lcl_elemento_de_dados,
      _adicionar_ao_dicionario IMPORTING io_elemento_de_dados TYPE REF TO lcl_elemento_de_dados,
      _listar_dicionario.

    METHODS:
      constructor IMPORTING iv_nome        TYPE char20
                            iv_descricao   TYPE string
                            iv_texto_curto TYPE text15
                            iv_texto_medio TYPE text30
                            iv_texto_longo TYPE text50
                            iv_titulo      TYPE text20,
      descrever_elemento.

    CLASS-DATA:
      _dicionario_de_dados TYPE TABLE OF REF TO lcl_elemento_de_dados.

    DATA:
      texto_curto   TYPE text15,
      texto_medio   TYPE text30,
      texto_longo   TYPE text50,
      texto_titulo  TYPE text20,
      descricao     TYPE string,
      nome_elemento TYPE char20,
      tipo_de_dados TYPE string.

ENDCLASS.

CLASS lcl_programa DEFINITION FINAL CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS:
      _start_of_selection,
      _end_of_selection.
ENDCLASS.


START-OF-SELECTION.
  lcl_programa=>_start_of_selection( ).

END-OF-SELECTION.
  lcl_programa=>_end_of_selection( ).


CLASS lcl_programa IMPLEMENTATION.
* 1- Criar 4 Elementos de Dados podendo ser Z ou se baseando em Elementos Standard. Para isso, você deverá utilizar o método estático da classe
* LCL_ELEMENTO_DE_DADOS.
  METHOD _start_of_selection.
     lcl_elemento_de_dados=>_gerar_elemento_de_dados(
      EXPORTING
        iv_nome        = 'WERKS_D'
        iv_descricao   = 'Centro'
        iv_texto_curto = 'Centro'
        iv_texto_medio = 'Centro'
        iv_texto_longo = 'Centro'
        iv_titulo      = 'Centro' ).

    lcl_elemento_de_dados=>_gerar_elemento_de_dados(
      EXPORTING
        iv_nome        = 'MBLNR'
        iv_descricao   = 'Nº documento de material'
        iv_texto_curto = 'Doc.mat.'
        iv_texto_medio = 'Doc.material'
        iv_texto_longo = 'Doc.material'
        iv_titulo      = 'Doc.mat.' ).

    lcl_elemento_de_dados=>_gerar_elemento_de_dados(
      EXPORTING
        iv_nome        = 'ZEXERCICIO12'
        iv_descricao   = 'Exercício Aula 12'
        iv_texto_curto = 'Ex. Aula 12'
        iv_texto_medio = 'Exerc. Aula 12'
        iv_texto_longo = 'Exercício Aula 12'
        iv_titulo      = 'Exercício Aula 12' ).

    lcl_elemento_de_dados=>_gerar_elemento_de_dados(
      EXPORTING
        iv_nome        = 'ZCURSO_ABAP_OO'
        iv_descricao   = 'Curso ABAP Orientado a Objetos'
        iv_texto_curto = 'ABAP OO'
        iv_texto_medio = 'Curso ABAP OO'
        iv_texto_longo = 'Curso ABAP Orientado a Objetos'
        iv_titulo      = 'Curso ABAP OO' ).
  ENDMETHOD.


  METHOD _end_of_selection.
* Saída dos Elementos de Dados em Tela
    lcl_elemento_de_dados=>_listar_dicionario( ).
  ENDMETHOD.
ENDCLASS.

*3- Crie uma saída para os elementos de dados criados através do método estático _LISTAR_DICIONARIO já chamado no método _END_OF_SELECTION da classe
* LCL_PROGRAMA. O método DESCREVER_ELEMENTO da classe LCL_ELEMENTO_DE_DADOS poderá ser utilizado, porém, você deverá listar todos os elementos de
* dados criados de uma vez.
CLASS lcl_elemento_de_dados IMPLEMENTATION.
  METHOD _gerar_elemento_de_dados.
    return = NEW lcl_elemento_de_dados( iv_nome        = iv_nome
                                        iv_descricao   = iv_descricao
                                        iv_texto_curto = iv_texto_curto
                                        iv_texto_medio = iv_texto_medio
                                        iv_texto_longo = iv_texto_longo
                                        iv_titulo      = iv_titulo ).
*Outra foma de fazer:
*    CREATE OBJECT return
*      EXPORTING
*        iv_nome        = iv_nome
*        iv_descricao   = iv_descricao
*        iv_texto_curto = iv_texto_curto
*        iv_texto_medio = iv_texto_medio
*        iv_texto_longo = iv_texto_longo
*        iv_titulo      = iv_titulo.

    lcl_elemento_de_dados=>_adicionar_ao_dicionario( return ).
  ENDMETHOD.

*2- Ao gerar uma nova instância de Elemento de Dados, você deverá adicionar a mesma ao atributo estático _DICIONARIO_DE_DADOS da
*classe LCL_ELEMENTO_DE_DADOS. Para isso, você deverá utilizar o método _ADICIONAR_AO_DICIONARIO.
  METHOD _adicionar_ao_dicionario.
    APPEND io_elemento_de_dados TO _dicionario_de_dados.
  ENDMETHOD.

  METHOD constructor.
    texto_curto   = iv_texto_curto.
    texto_medio   = iv_texto_medio.
    texto_longo   = iv_texto_longo.
    texto_titulo  = iv_titulo.
    descricao     = iv_descricao.
    nome_elemento = iv_nome.
  ENDMETHOD.

  METHOD descrever_elemento.
    WRITE:/ 'Elemento de dados', nome_elemento, 'definido com a descrição', descricao.
    WRITE:/ 'Atributos:'.
    WRITE:/ 'Texto Curto:', texto_curto.
    WRITE:/ 'Texto Médio:', texto_medio.
    WRITE:/ 'Texto Longo:', texto_longo.
    WRITE:/ 'Texto Título:', texto_titulo.
    SKIP.
  ENDMETHOD.

  METHOD _listar_dicionario.
    DATA: lo_elemento_de_dados TYPE REF TO lcl_elemento_de_dados.

    LOOP AT _dicionario_de_dados INTO lo_elemento_de_dados.
      lo_elemento_de_dados->descrever_elemento( ).
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.